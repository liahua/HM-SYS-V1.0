<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hm.sys.dao.SysDeptsDao" >
	 <resultMap id="BaseResultMap" type="com.hm.sys.entity.SysDepts" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="parentId" property="parentid" jdbcType="INTEGER" />
    <result column="sort" property="sort" jdbcType="INTEGER" />
    <result column="note" property="note" jdbcType="VARCHAR" />
    <result column="createdTime" property="createdtime" jdbcType="TIMESTAMP" />
    <result column="modifiedTime" property="modifiedtime" jdbcType="TIMESTAMP" />
    <result column="createdUser" property="createduser" jdbcType="VARCHAR" />
    <result column="modifiedUser" property="modifieduser" jdbcType="VARCHAR" />
  </resultMap>
    <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, name, parentId, sort, note, createdTime, modifiedTime, createdUser, modifiedUser
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.hm.sys.entity.SysDeptsExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from sys_depts
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  
   <update id="updateByPrimaryKey" parameterType="com.hm.sys.entity.SysDepts" >
    update sys_depts
    set name = #{name,jdbcType=VARCHAR},
      parentId = #{parentid,jdbcType=INTEGER},
      sort = #{sort,jdbcType=INTEGER},
      note = #{note,jdbcType=VARCHAR},
      createdTime = #{createdtime,jdbcType=TIMESTAMP},
      modifiedTime = #{modifiedtime,jdbcType=TIMESTAMP},
      createdUser = #{createduser,jdbcType=VARCHAR},
      modifiedUser = #{modifieduser,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <insert id="insert" parameterType="com.hm.sys.entity.SysDepts" >
    insert into sys_depts (id, name, parentId, 
      sort, note, createdTime, 
      modifiedTime, createdUser, modifiedUser
      )
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{parentid,jdbcType=INTEGER}, 
      #{sort,jdbcType=INTEGER}, #{note,jdbcType=VARCHAR}, #{createdtime,jdbcType=TIMESTAMP}, 
      #{modifiedtime,jdbcType=TIMESTAMP}, #{createduser,jdbcType=VARCHAR}, #{modifieduser,jdbcType=VARCHAR}
      )
  </insert>
  
   <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from sys_depts
    where id = #{id,jdbcType=INTEGER}
  </delete>
  
  
  <!-- 查询子部门数量 -->
  <select id="getChildCount" parameterType="int" resultType="int">
	
	select count(*) from sys_depts where parentId=#{id}

	</select>
	
	<!-- 定义一个Node对象,借助此对象封装从数据库查询到的数据 -->
	 <select id="findZtreeDeptNodes"
            resultType="com.hm.sys.vo.Node">
        select id,name,parentId
        from sys_depts        
    </select>
</mapper>